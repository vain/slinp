#!/usr/bin/env python3

import subprocess
import curses
import sys

class Presenter(object):
    def __init__(self, window, path):
        self.window = window
        self.path = path
        self.previews = []
        self.projector = None
        self.projector_blank = False
        self.page = 1
        self.num_pages = None
        self.notes = []
        self.stopclock = None

        self.key_bindings = {
            'j': self.next_slide,
            ' ': self.next_slide,
            'KEY_DOWN': self.next_slide,
            'KEY_RIGHT': self.next_slide,
            'k': self.prev_slide,
            'KEY_UP': self.prev_slide,
            'KEY_LEFT': self.prev_slide,
            'b': self.blank,
            'a': self.stopclock_start,
            's': self.stopclock_pause,
            'd': self.stopclock_reset,
            'q': self.shutdown,
        }

    def read_pdf_meta(self):
        """Read PDF metadata using "pdfinfo".

        Currently, this only determines how many pages there are in the PDF
        file.
        """
        p = subprocess.Popen(['pdfinfo', self.path], stdout=subprocess.PIPE)
        (stdoutdata, _) = p.communicate()
        lines = str(stdoutdata, 'UTF-8').split('\n')
        for i in lines:
            fields = [f.strip() for f in i.split(':')]
            if fields[0] == 'Pages':
                self.num_pages = int(fields[1])

    def launch_preview_range(self, a, b):
        """Launch all instances of "showpdf" (preview windows)."""
        for offset in range(a, b + 1, 1):
            self.launch_preview(a, b, offset)

    def launch_preview(self, a, b, offset):
        """Launch one instance of "showpdf" (one preview window)."""
        iname = '{0}_{1}_{2}'.format(a, b, offset)
        self.previews.append( (self.run_showpdf(iname), offset) )

    def launch_projector(self):
        """Launch one instance of "showpdf", the projector window."""
        self.projector = self.run_showpdf('projector')

    def run_showpdf(self, instance_name):
        """Run "showpdf" and return the Popen object."""
        p = subprocess.Popen([
                                  'showpdf',
                                  '--name',
                                  instance_name,
                                  self.path
                             ],
                             bufsize=0, stdin=subprocess.PIPE)
        return p

    def launch_stopclock(self):
        """Run "stopclock"."""
        p = subprocess.Popen(['stopclock'], bufsize=0, stdin=subprocess.PIPE)
        self.stopclock = p

    def read_notes(self):
        """Run "slidenotes" to get the notes for the current slide."""
        p = subprocess.Popen([
                                  'slidenotes',
                                  self.path,
                                  '{0}'.format(self.page)
                             ],
                             stdout=subprocess.PIPE)
        (stdoutdata, _) = p.communicate()
        self.notes = str(stdoutdata, 'UTF-8').split('\n')

    def show_current_info(self):
        """Show current slide number and the slide's notes."""
        self.window.erase()
        (height, width) = self.window.getmaxyx()

        self.window.addstr(0, 2, '--> {0} <--'.format(self.page))

        line_number = 2
        for line in self.notes:
            self.window.addstr(line_number, 0, line)
            line_number += 1
            if line_number == height:
                break

    def navigate_current(self):
        """Issue a "go_page n" in all instance of "showpdf", read notes."""
        if self.projector_blank:
            self.projector.stdin.write(bytes('go_page -1\n', 'UTF-8'))
        else:
            self.projector.stdin.write(bytes('go_page {0}\n'.format(self.page),
                                             'UTF-8'))
        for (p, offset) in self.previews:
            p.stdin.write(bytes('go_page {0}\n'.format(self.page + offset),
                                'UTF-8'))

        self.read_notes()

    def next_slide(self):
        """Go the next slide unless we're already at the end."""
        if self.page < self.num_pages:
            self.page += 1
            self.navigate_current()

    def prev_slide(self):
        """Go the previous slide unless we're already at the beginning."""
        if self.page > 1:
            self.page -= 1
            self.navigate_current()

    def stopclock_start(self):
        """Issue a "start" on the stopclock."""
        self.stopclock.stdin.write(bytes('start\n', 'UTF-8'))

    def stopclock_pause(self):
        """Issue a "pause" on the stopclock."""
        self.stopclock.stdin.write(bytes('pause\n', 'UTF-8'))

    def stopclock_reset(self):
        """Issue a "reset" on the stopclock."""
        self.stopclock.stdin.write(bytes('reset\n', 'UTF-8'))

    def end_children(self):
        """Kill all instance of "showpdf" and "stopclock" that we know of."""
        self.projector.kill()
        for (p, _) in self.previews:
            p.kill()
        self.stopclock.kill()

    def shutdown(self):
        self.end_children()
        sys.exit(0)

    def blank(self):
        self.projector_blank = not self.projector_blank
        self.navigate_current()

    def interaction_loop(self):
        """Wait for user commands and act upon them."""
        while True:
            self.show_current_info()
            command = self.key_bindings.get(self.window.getkey())
            if command:
                command()


def application(window, argv):
    """Fire up the applications. Use "argv" to customize the preview windows."""
    p = Presenter(window, argv[0])
    p.read_pdf_meta()
    if len(argv) == 1:
        p.launch_preview_range(-1, 1)
    else:
        p.launch_preview_range(int(argv[1]), int(argv[2]))
    p.launch_projector()
    p.launch_stopclock()
    p.navigate_current()
    p.interaction_loop()


if __name__ == '__main__':
    try:
        curses.wrapper(application, sys.argv[1:])
    except KeyboardInterrupt:
        pass


# vim: set tw=80 ts=4 sw=4 et sta :
